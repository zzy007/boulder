// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: nonce/proto/nonce.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/letsencrypt/boulder/core/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NonceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceMessage) Reset() {
	*x = NonceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nonce_proto_nonce_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceMessage) ProtoMessage() {}

func (x *NonceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nonce_proto_nonce_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceMessage.ProtoReflect.Descriptor instead.
func (*NonceMessage) Descriptor() ([]byte, []int) {
	return file_nonce_proto_nonce_proto_rawDescGZIP(), []int{0}
}

func (x *NonceMessage) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ValidMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ValidMessage) Reset() {
	*x = ValidMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nonce_proto_nonce_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMessage) ProtoMessage() {}

func (x *ValidMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nonce_proto_nonce_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMessage.ProtoReflect.Descriptor instead.
func (*ValidMessage) Descriptor() ([]byte, []int) {
	return file_nonce_proto_nonce_proto_rawDescGZIP(), []int{1}
}

func (x *ValidMessage) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

var File_nonce_proto_nonce_proto protoreflect.FileDescriptor

var file_nonce_proto_nonce_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x1a, 0x15, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x24, 0x0a,
	0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x32, 0x71, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0b, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x12, 0x13, 0x2e, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x13, 0x2e, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x2f, 0x62, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nonce_proto_nonce_proto_rawDescOnce sync.Once
	file_nonce_proto_nonce_proto_rawDescData = file_nonce_proto_nonce_proto_rawDesc
)

func file_nonce_proto_nonce_proto_rawDescGZIP() []byte {
	file_nonce_proto_nonce_proto_rawDescOnce.Do(func() {
		file_nonce_proto_nonce_proto_rawDescData = protoimpl.X.CompressGZIP(file_nonce_proto_nonce_proto_rawDescData)
	})
	return file_nonce_proto_nonce_proto_rawDescData
}

var file_nonce_proto_nonce_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_nonce_proto_nonce_proto_goTypes = []interface{}{
	(*NonceMessage)(nil), // 0: nonce.NonceMessage
	(*ValidMessage)(nil), // 1: nonce.ValidMessage
	(*proto1.Empty)(nil), // 2: core.Empty
}
var file_nonce_proto_nonce_proto_depIdxs = []int32{
	2, // 0: nonce.NonceService.Nonce:input_type -> core.Empty
	0, // 1: nonce.NonceService.Redeem:input_type -> nonce.NonceMessage
	0, // 2: nonce.NonceService.Nonce:output_type -> nonce.NonceMessage
	1, // 3: nonce.NonceService.Redeem:output_type -> nonce.ValidMessage
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_nonce_proto_nonce_proto_init() }
func file_nonce_proto_nonce_proto_init() {
	if File_nonce_proto_nonce_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nonce_proto_nonce_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nonce_proto_nonce_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nonce_proto_nonce_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nonce_proto_nonce_proto_goTypes,
		DependencyIndexes: file_nonce_proto_nonce_proto_depIdxs,
		MessageInfos:      file_nonce_proto_nonce_proto_msgTypes,
	}.Build()
	File_nonce_proto_nonce_proto = out.File
	file_nonce_proto_nonce_proto_rawDesc = nil
	file_nonce_proto_nonce_proto_goTypes = nil
	file_nonce_proto_nonce_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NonceServiceClient is the client API for NonceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NonceServiceClient interface {
	Nonce(ctx context.Context, in *proto1.Empty, opts ...grpc.CallOption) (*NonceMessage, error)
	Redeem(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ValidMessage, error)
}

type nonceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNonceServiceClient(cc grpc.ClientConnInterface) NonceServiceClient {
	return &nonceServiceClient{cc}
}

func (c *nonceServiceClient) Nonce(ctx context.Context, in *proto1.Empty, opts ...grpc.CallOption) (*NonceMessage, error) {
	out := new(NonceMessage)
	err := c.cc.Invoke(ctx, "/nonce.NonceService/Nonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nonceServiceClient) Redeem(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ValidMessage, error) {
	out := new(ValidMessage)
	err := c.cc.Invoke(ctx, "/nonce.NonceService/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NonceServiceServer is the server API for NonceService service.
type NonceServiceServer interface {
	Nonce(context.Context, *proto1.Empty) (*NonceMessage, error)
	Redeem(context.Context, *NonceMessage) (*ValidMessage, error)
}

// UnimplementedNonceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNonceServiceServer struct {
}

func (*UnimplementedNonceServiceServer) Nonce(context.Context, *proto1.Empty) (*NonceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nonce not implemented")
}
func (*UnimplementedNonceServiceServer) Redeem(context.Context, *NonceMessage) (*ValidMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redeem not implemented")
}

func RegisterNonceServiceServer(s *grpc.Server, srv NonceServiceServer) {
	s.RegisterService(&_NonceService_serviceDesc, srv)
}

func _NonceService_Nonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NonceServiceServer).Nonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nonce.NonceService/Nonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NonceServiceServer).Nonce(ctx, req.(*proto1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NonceService_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NonceServiceServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nonce.NonceService/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NonceServiceServer).Redeem(ctx, req.(*NonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NonceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nonce.NonceService",
	HandlerType: (*NonceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nonce",
			Handler:    _NonceService_Nonce_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _NonceService_Redeem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nonce/proto/nonce.proto",
}
